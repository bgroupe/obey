// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: job_scheduler.proto

package jobscheduler

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BroadcastAddress string `protobuf:"bytes,2,opt,name=broadcastAddress,proto3" json:"broadcastAddress,omitempty"`
	EnvName          string `protobuf:"bytes,3,opt,name=envName,proto3" json:"envName,omitempty"`
	EnvType          string `protobuf:"bytes,4,opt,name=envType,proto3" json:"envType,omitempty"` // google.protobuf.Timestamp launchTime = 5;
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterReq) GetBroadcastAddress() string {
	if x != nil {
		return x.BroadcastAddress
	}
	return ""
}

func (x *RegisterReq) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *RegisterReq) GetEnvType() string {
	if x != nil {
		return x.EnvType
	}
	return ""
}

type RegisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	WorkerID string `protobuf:"bytes,2,opt,name=workerID,proto3" json:"workerID,omitempty"`
}

func (x *RegisterRes) Reset() {
	*x = RegisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRes) ProtoMessage() {}

func (x *RegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRes.ProtoReflect.Descriptor instead.
func (*RegisterRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterRes) GetWorkerID() string {
	if x != nil {
		return x.WorkerID
	}
	return ""
}

type DeregisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerID string `protobuf:"bytes,1,opt,name=workerID,proto3" json:"workerID,omitempty"`
}

func (x *DeregisterReq) Reset() {
	*x = DeregisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterReq) ProtoMessage() {}

func (x *DeregisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterReq.ProtoReflect.Descriptor instead.
func (*DeregisterReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *DeregisterReq) GetWorkerID() string {
	if x != nil {
		return x.WorkerID
	}
	return ""
}

type DeregisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeregisterRes) Reset() {
	*x = DeregisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterRes) ProtoMessage() {}

func (x *DeregisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterRes.ProtoReflect.Descriptor instead.
func (*DeregisterRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *DeregisterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReportServiceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceData []*ServiceData `protobuf:"bytes,2,rep,name=serviceData,proto3" json:"serviceData,omitempty"`
}

func (x *ReportServiceDataRequest) Reset() {
	*x = ReportServiceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportServiceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportServiceDataRequest) ProtoMessage() {}

func (x *ReportServiceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportServiceDataRequest.ProtoReflect.Descriptor instead.
func (*ReportServiceDataRequest) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *ReportServiceDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportServiceDataRequest) GetServiceData() []*ServiceData {
	if x != nil {
		return x.ServiceData
	}
	return nil
}

type ReportServiceDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReportServiceDataResponse) Reset() {
	*x = ReportServiceDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportServiceDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportServiceDataResponse) ProtoMessage() {}

func (x *ReportServiceDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportServiceDataResponse.ProtoReflect.Descriptor instead.
func (*ReportServiceDataResponse) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *ReportServiceDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ServiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Created  string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Revision string `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ServiceData) Reset() {
	*x = ServiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceData) ProtoMessage() {}

func (x *ServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceData.ProtoReflect.Descriptor instead.
func (*ServiceData) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ServiceData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServiceData) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ServiceData) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type StartJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *StartJobReq) Reset() {
	*x = StartJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobReq) ProtoMessage() {}

func (x *StartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobReq.ProtoReflect.Descriptor instead.
func (*StartJobReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *StartJobReq) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *StartJobReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StartJobRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *StartJobRes) Reset() {
	*x = StartJobRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRes) ProtoMessage() {}

func (x *StartJobRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRes.ProtoReflect.Descriptor instead.
func (*StartJobRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *StartJobRes) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type StopJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *StopJobReq) Reset() {
	*x = StopJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobReq) ProtoMessage() {}

func (x *StopJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobReq.ProtoReflect.Descriptor instead.
func (*StopJobReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *StopJobReq) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type StopJobRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopJobRes) Reset() {
	*x = StopJobRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRes) ProtoMessage() {}

func (x *StopJobRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRes.ProtoReflect.Descriptor instead.
func (*StopJobRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{10}
}

type QueryJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *QueryJobReq) Reset() {
	*x = QueryJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobReq) ProtoMessage() {}

func (x *QueryJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobReq.ProtoReflect.Descriptor instead.
func (*QueryJobReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *QueryJobReq) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type QueryJobRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done      bool   `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Error     bool   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorText string `protobuf:"bytes,3,opt,name=errorText,proto3" json:"errorText,omitempty"`
}

func (x *QueryJobRes) Reset() {
	*x = QueryJobRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobRes) ProtoMessage() {}

func (x *QueryJobRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobRes.ProtoReflect.Descriptor instead.
func (*QueryJobRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{12}
}

func (x *QueryJobRes) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *QueryJobRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *QueryJobRes) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type QueryServiceVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *QueryServiceVersionReq) Reset() {
	*x = QueryServiceVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceVersionReq) ProtoMessage() {}

func (x *QueryServiceVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceVersionReq.ProtoReflect.Descriptor instead.
func (*QueryServiceVersionReq) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{13}
}

func (x *QueryServiceVersionReq) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type QueryServiceVersionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceVersion string `protobuf:"bytes,1,opt,name=serviceVersion,proto3" json:"serviceVersion,omitempty"`
}

func (x *QueryServiceVersionRes) Reset() {
	*x = QueryServiceVersionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_scheduler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceVersionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceVersionRes) ProtoMessage() {}

func (x *QueryServiceVersionRes) ProtoReflect() protoreflect.Message {
	mi := &file_job_scheduler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceVersionRes.ProtoReflect.Descriptor instead.
func (*QueryServiceVersionRes) Descriptor() ([]byte, []int) {
	return file_job_scheduler_proto_rawDescGZIP(), []int{14}
}

func (x *QueryServiceVersionRes) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

var File_job_scheduler_proto protoreflect.FileDescriptor

var file_job_scheduler_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43,
	0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x23,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x44, 0x22, 0x22, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x3a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x8d, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xb6, 0x02, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x51, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x42, 0x17, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0c, 0x6a,
	0x6f, 0x62, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_job_scheduler_proto_rawDescOnce sync.Once
	file_job_scheduler_proto_rawDescData = file_job_scheduler_proto_rawDesc
)

func file_job_scheduler_proto_rawDescGZIP() []byte {
	file_job_scheduler_proto_rawDescOnce.Do(func() {
		file_job_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_scheduler_proto_rawDescData)
	})
	return file_job_scheduler_proto_rawDescData
}

var file_job_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_job_scheduler_proto_goTypes = []interface{}{
	(*RegisterReq)(nil),               // 0: jobscheduler.RegisterReq
	(*RegisterRes)(nil),               // 1: jobscheduler.RegisterRes
	(*DeregisterReq)(nil),             // 2: jobscheduler.DeregisterReq
	(*DeregisterRes)(nil),             // 3: jobscheduler.DeregisterRes
	(*ReportServiceDataRequest)(nil),  // 4: jobscheduler.ReportServiceDataRequest
	(*ReportServiceDataResponse)(nil), // 5: jobscheduler.ReportServiceDataResponse
	(*ServiceData)(nil),               // 6: jobscheduler.ServiceData
	(*StartJobReq)(nil),               // 7: jobscheduler.StartJobReq
	(*StartJobRes)(nil),               // 8: jobscheduler.StartJobRes
	(*StopJobReq)(nil),                // 9: jobscheduler.StopJobReq
	(*StopJobRes)(nil),                // 10: jobscheduler.StopJobRes
	(*QueryJobReq)(nil),               // 11: jobscheduler.QueryJobReq
	(*QueryJobRes)(nil),               // 12: jobscheduler.QueryJobRes
	(*QueryServiceVersionReq)(nil),    // 13: jobscheduler.QueryServiceVersionReq
	(*QueryServiceVersionRes)(nil),    // 14: jobscheduler.QueryServiceVersionRes
}
var file_job_scheduler_proto_depIdxs = []int32{
	6,  // 0: jobscheduler.ReportServiceDataRequest.serviceData:type_name -> jobscheduler.ServiceData
	0,  // 1: jobscheduler.Scheduler.RegisterWorker:input_type -> jobscheduler.RegisterReq
	2,  // 2: jobscheduler.Scheduler.DeregisterWorker:input_type -> jobscheduler.DeregisterReq
	4,  // 3: jobscheduler.Scheduler.ReportServiceData:input_type -> jobscheduler.ReportServiceDataRequest
	7,  // 4: jobscheduler.Worker.StartJob:input_type -> jobscheduler.StartJobReq
	9,  // 5: jobscheduler.Worker.StopJob:input_type -> jobscheduler.StopJobReq
	11, // 6: jobscheduler.Worker.QueryJob:input_type -> jobscheduler.QueryJobReq
	13, // 7: jobscheduler.Worker.QueryServiceVersion:input_type -> jobscheduler.QueryServiceVersionReq
	1,  // 8: jobscheduler.Scheduler.RegisterWorker:output_type -> jobscheduler.RegisterRes
	3,  // 9: jobscheduler.Scheduler.DeregisterWorker:output_type -> jobscheduler.DeregisterRes
	5,  // 10: jobscheduler.Scheduler.ReportServiceData:output_type -> jobscheduler.ReportServiceDataResponse
	8,  // 11: jobscheduler.Worker.StartJob:output_type -> jobscheduler.StartJobRes
	10, // 12: jobscheduler.Worker.StopJob:output_type -> jobscheduler.StopJobRes
	12, // 13: jobscheduler.Worker.QueryJob:output_type -> jobscheduler.QueryJobRes
	14, // 14: jobscheduler.Worker.QueryServiceVersion:output_type -> jobscheduler.QueryServiceVersionRes
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_job_scheduler_proto_init() }
func file_job_scheduler_proto_init() {
	if File_job_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_job_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportServiceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportServiceDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_scheduler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceVersionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_job_scheduler_proto_goTypes,
		DependencyIndexes: file_job_scheduler_proto_depIdxs,
		MessageInfos:      file_job_scheduler_proto_msgTypes,
	}.Build()
	File_job_scheduler_proto = out.File
	file_job_scheduler_proto_rawDesc = nil
	file_job_scheduler_proto_goTypes = nil
	file_job_scheduler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	RegisterWorker(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	DeregisterWorker(ctx context.Context, in *DeregisterReq, opts ...grpc.CallOption) (*DeregisterRes, error)
	ReportServiceData(ctx context.Context, in *ReportServiceDataRequest, opts ...grpc.CallOption) (*ReportServiceDataResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) RegisterWorker(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Scheduler/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeregisterWorker(ctx context.Context, in *DeregisterReq, opts ...grpc.CallOption) (*DeregisterRes, error) {
	out := new(DeregisterRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Scheduler/DeregisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ReportServiceData(ctx context.Context, in *ReportServiceDataRequest, opts ...grpc.CallOption) (*ReportServiceDataResponse, error) {
	out := new(ReportServiceDataResponse)
	err := c.cc.Invoke(ctx, "/jobscheduler.Scheduler/ReportServiceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	RegisterWorker(context.Context, *RegisterReq) (*RegisterRes, error)
	DeregisterWorker(context.Context, *DeregisterReq) (*DeregisterRes, error)
	ReportServiceData(context.Context, *ReportServiceDataRequest) (*ReportServiceDataResponse, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) RegisterWorker(context.Context, *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (*UnimplementedSchedulerServer) DeregisterWorker(context.Context, *DeregisterReq) (*DeregisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterWorker not implemented")
}
func (*UnimplementedSchedulerServer) ReportServiceData(context.Context, *ReportServiceDataRequest) (*ReportServiceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportServiceData not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Scheduler/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RegisterWorker(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Scheduler/DeregisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeregisterWorker(ctx, req.(*DeregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ReportServiceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportServiceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ReportServiceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Scheduler/ReportServiceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ReportServiceData(ctx, req.(*ReportServiceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobscheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _Scheduler_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _Scheduler_DeregisterWorker_Handler,
		},
		{
			MethodName: "ReportServiceData",
			Handler:    _Scheduler_ReportServiceData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job_scheduler.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	StartJob(ctx context.Context, in *StartJobReq, opts ...grpc.CallOption) (*StartJobRes, error)
	StopJob(ctx context.Context, in *StopJobReq, opts ...grpc.CallOption) (*StopJobRes, error)
	QueryJob(ctx context.Context, in *QueryJobReq, opts ...grpc.CallOption) (*QueryJobRes, error)
	QueryServiceVersion(ctx context.Context, in *QueryServiceVersionReq, opts ...grpc.CallOption) (*QueryServiceVersionRes, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) StartJob(ctx context.Context, in *StartJobReq, opts ...grpc.CallOption) (*StartJobRes, error) {
	out := new(StartJobRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Worker/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StopJob(ctx context.Context, in *StopJobReq, opts ...grpc.CallOption) (*StopJobRes, error) {
	out := new(StopJobRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Worker/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) QueryJob(ctx context.Context, in *QueryJobReq, opts ...grpc.CallOption) (*QueryJobRes, error) {
	out := new(QueryJobRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Worker/QueryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) QueryServiceVersion(ctx context.Context, in *QueryServiceVersionReq, opts ...grpc.CallOption) (*QueryServiceVersionRes, error) {
	out := new(QueryServiceVersionRes)
	err := c.cc.Invoke(ctx, "/jobscheduler.Worker/QueryServiceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	StartJob(context.Context, *StartJobReq) (*StartJobRes, error)
	StopJob(context.Context, *StopJobReq) (*StopJobRes, error)
	QueryJob(context.Context, *QueryJobReq) (*QueryJobRes, error)
	QueryServiceVersion(context.Context, *QueryServiceVersionReq) (*QueryServiceVersionRes, error)
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) StartJob(context.Context, *StartJobReq) (*StartJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedWorkerServer) StopJob(context.Context, *StopJobReq) (*StopJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedWorkerServer) QueryJob(context.Context, *QueryJobReq) (*QueryJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJob not implemented")
}
func (*UnimplementedWorkerServer) QueryServiceVersion(context.Context, *QueryServiceVersionReq) (*QueryServiceVersionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServiceVersion not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Worker/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StartJob(ctx, req.(*StartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Worker/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StopJob(ctx, req.(*StopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_QueryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).QueryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Worker/QueryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).QueryJob(ctx, req.(*QueryJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_QueryServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).QueryServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobscheduler.Worker/QueryServiceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).QueryServiceVersion(ctx, req.(*QueryServiceVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobscheduler.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _Worker_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _Worker_StopJob_Handler,
		},
		{
			MethodName: "QueryJob",
			Handler:    _Worker_QueryJob_Handler,
		},
		{
			MethodName: "QueryServiceVersion",
			Handler:    _Worker_QueryServiceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job_scheduler.proto",
}
